{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1008.15138",
      "templateHash": "8338872569017102613"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "appNameSuffix": {
      "type": "string",
      "defaultValue": "[uniqueString(resourceGroup().id)]"
    },
    "keyVaultSku": {
      "type": "string",
      "defaultValue": "Standard"
    }
  },
  "functions": [],
  "variables": {
    "functionAppName": "[format('fn-{0}', parameters('appNameSuffix'))]",
    "appServicePlanName": "FunctionPlan",
    "appInsightsName": "AppInsights",
    "storageAccountName": "[format('fnstor{0}', replace(parameters('appNameSuffix'), '-', ''))]",
    "functionNameComputed": "MyHttpTriggeredFunction1",
    "functionRuntime": "powershell",
    "keyVaultName": "[format('kv{0}', replace(parameters('appNameSuffix'), '-', ''))]",
    "functionAppKeySecretName": "FunctionAppHostKey"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2019-06-01",
      "name": "[variables('storageAccountName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "StorageV2",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2018-05-01-preview",
      "name": "[variables('appInsightsName')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "publicNetworkAccessForIngestion": "Enabled",
        "publicNetworkAccessForQuery": "Enabled"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2020-06-01",
      "name": "[variables('appServicePlanName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "sku": {
        "name": "Y1"
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2020-06-01",
      "name": "[variables('functionAppName')]",
      "location": "[parameters('location')]",
      "kind": "functionapp",
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};EndpointSuffix={1};AccountKey={2}', variables('storageAccountName'), environment().suffixes.storage, listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
              "value": "[reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey]"
            },
            {
              "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
              "value": "[format('InstrumentationKey={0}', reference(resourceId('Microsoft.Insights/components', variables('appInsightsName'))).InstrumentationKey)]"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "[variables('functionRuntime')]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~3"
            }
          ]
        },
        "httpsOnly": true
      },
      "dependsOn": [
        "[resourceId('Microsoft.Insights/components', variables('appInsightsName'))]",
        "[resourceId('Microsoft.Web/serverfarms', variables('appServicePlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2020-06-01",
      "name": "[format('{0}/{1}', variables('functionAppName'), variables('functionNameComputed'))]",
      "properties": {
        "config": {
          "disabled": false,
          "bindings": [
            {
              "name": "req",
              "type": "httpTrigger",
              "direction": "in",
              "authLevel": "function",
              "methods": [
                "get"
              ]
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ]
        },
        "files": {
          "run.ps1": "      using namespace System.Net\r\n\r\n      # Input bindings are passed in via param block.\r\n      param($Request, $TriggerMetadata)\r\n      \r\n      # Write to the Azure Functions log stream.\r\n      Write-Host \"PowerShell HTTP trigger function processed a request.\"\r\n      \r\n      # Interact with query parameters or the body of the request.\r\n      $tagName = $Request.Query.tagName\r\n      if (-not $tagName) {\r\n          $tagName = $Request.Body.tagName\r\n      }\r\n      $tagValue = $Request.Query.tagValue\r\n      if (-not $tagValue) {\r\n          $tagValue = $Request.Body.tagValue\r\n      }\r\n      \r\n      $body = \"This HTTP triggered function executed successfully. Pass a name in the query string or in the request body for a personalized response.\"\r\n      \r\n      Import-Module Az.ResourceGraph\r\n      \r\n      $statusGood = $true\r\n      \r\n      $graphQuery = \"resourcecontainers | where type == 'microsoft.resources/subscriptions/resourcegroups' | project  name,type,location,subscriptionId,tags | union (resources | project name,type,location,subscriptionId,tags) | mv-expand  tags| extend tagKey = tostring(bag_keys(tags)[0]) | extend tagValue = tostring(tags[tagKey]) | where tagKey =~ '$tagName' and tagValue  =~ '$tagValue'\"\r\n      \r\n      try {\r\n              $taggedResources = Search-AzGraph -Query $graphQuery\r\n              $taggedResourcesCount = $taggedResources.count\r\n          }\r\n      catch {\r\n              $statusGood = $false\r\n              Write-Error \"Failure running Search-AzGraph, $_\"\r\n          }\r\n          \r\n      if($statusGood)\r\n      {\r\n          #$status = [HttpStatusCode]::OK\r\n          if ($taggedResourcesCount -ge 1){\r\n              $taggedResourcesJson = ConvertTo-Json $taggedResources\r\n              $status = [HttpStatusCode]::OK; \r\n          } else {\r\n              $taggedResourcesJson = \"{`\"result`\": `\"Nothing found by query`\", `\"query`\": `\"$graphQuery`\"}\";\r\n              $status = [HttpStatusCode]::OK;\r\n          }\r\n      } else {\r\n          $taggedResourcesJson = \"{`\"Status`\": `\"Failed`\"}\"\r\n          $status = [HttpStatusCode]::BadRequest\r\n      }\r\n      \r\n      # Associate values to output bindings by calling 'Push-OutputBinding'.\r\n      Push-OutputBinding -Name Response -Value ([HttpResponseContext]@{\r\n          StatusCode = $status\r\n      \r\n          Body = $taggedResourcesJson  #+ $graphQuery\r\n      })\r\n      \r\n    "
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2019-09-01",
      "name": "[variables('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "family": "A",
          "name": "[parameters('keyVaultSku')]"
        },
        "accessPolicies": []
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2018-02-14",
      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('functionAppKeySecretName'))]",
      "properties": {
        "value": "[listKeys(format('{0}/host/default', resourceId('Microsoft.Web/sites', variables('functionAppName'))), '2020-06-01').functionKeys.default]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
      ]
    }
  ],
  "outputs": {
    "functionAppHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Web/sites', variables('functionAppName'))).defaultHostName]"
    },
    "functionName": {
      "type": "string",
      "value": "[variables('functionNameComputed')]"
    }
  }
}